
busebayraktarproje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  08000434  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  08000434  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800043c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010c4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000439  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a8  00000000  00000000  00021728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000101f  00000000  00000000  000218d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001930  00000000  00000000  000228ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb598  00000000  00000000  0002421f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df7b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f8  00000000  00000000  000df808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800041c 	.word	0x0800041c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800041c 	.word	0x0800041c

080001c8 <delay>:
#define gpiodataregister *((unsigned volatile int *) 0x40020c14)

// buse = 98+117+115+101= 431 so our mod4=3 = green 12
// bayraktar = 98+97+121+114+97+107+116+97+114 = 961 so our mod4 is 1 = blue 15

void delay(){ //function for blink delay
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	int delay0 = 0x000FFFFF;
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <delay+0x24>)
 80001d0:	607b      	str	r3, [r7, #4]
	while (delay0--){
 80001d2:	bf00      	nop
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	1e5a      	subs	r2, r3, #1
 80001d8:	607a      	str	r2, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1fa      	bne.n	80001d4 <delay+0xc>
		}
}
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	000fffff 	.word	0x000fffff

080001f0 <init_leds>:
void init_leds () { RCCAHB1EN = 0x8; //clock gate
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <init_leds+0x14>)
 80001f6:	2208      	movs	r2, #8
 80001f8:	601a      	str	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	40023830 	.word	0x40023830

08000208 <turn_name_on>:
void turn_name_on(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
		gpiomodregister = 0x1000000;
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <turn_name_on+0x20>)
 800020e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000212:	601a      	str	r2, [r3, #0]
		gpiodataregister = 0x1000;
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <turn_name_on+0x24>)
 8000216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40020c00 	.word	0x40020c00
 800022c:	40020c14 	.word	0x40020c14

08000230 <turn_surname_on>:
void turn_surname_on(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
		gpiomodregister = 0x40000000;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <turn_surname_on+0x20>)
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	601a      	str	r2, [r3, #0]
		gpiodataregister = 0x8000;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <turn_surname_on+0x24>)
 800023e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020c00 	.word	0x40020c00
 8000254:	40020c14 	.word	0x40020c14

08000258 <turn_name_off>:
void turn_name_off(){
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
		gpiodataregister=0x0000;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <turn_name_off+0x14>)
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40020c14 	.word	0x40020c14

08000270 <turn_surname_off>:
void turn_surname_off(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
		gpiodataregister=0x0000;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <turn_surname_off+0x14>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40020c14 	.word	0x40020c14

08000288 <main>:

int main(){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
init_leds();
 800028e:	f7ff ffaf 	bl	80001f0 <init_leds>
int k,m;

k=0;
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
while(k<4){
 8000296:	e00a      	b.n	80002ae <main+0x26>
turn_name_on();
 8000298:	f7ff ffb6 	bl	8000208 <turn_name_on>
delay();
 800029c:	f7ff ff94 	bl	80001c8 <delay>
turn_name_off();
 80002a0:	f7ff ffda 	bl	8000258 <turn_name_off>
delay();
 80002a4:	f7ff ff90 	bl	80001c8 <delay>
k++;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
while(k<4){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	ddf1      	ble.n	8000298 <main+0x10>
}

m=0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
while(m<9){
 80002b8:	e00a      	b.n	80002d0 <main+0x48>
turn_surname_on();
 80002ba:	f7ff ffb9 	bl	8000230 <turn_surname_on>
delay();
 80002be:	f7ff ff83 	bl	80001c8 <delay>
turn_surname_off();
 80002c2:	f7ff ffd5 	bl	8000270 <turn_surname_off>
delay();
 80002c6:	f7ff ff7f 	bl	80001c8 <delay>
m++;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	603b      	str	r3, [r7, #0]
while(m<9){
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	ddf1      	ble.n	80002ba <main+0x32>
}

return 0;
 80002d6:	2300      	movs	r3, #0
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <NMI_Handler+0x4>

080002e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <HardFault_Handler+0x4>

080002ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <MemManage_Handler+0x4>

080002f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <BusFault_Handler+0x4>

080002f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <UsageFault_Handler+0x4>

080002fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032c:	f000 f83e 	bl	80003ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <SystemInit+0x20>)
 800033a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <SystemInit+0x20>)
 8000340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000374:	4c0b      	ldr	r4, [pc, #44]	; (80003a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000382:	f7ff ffd7 	bl	8000334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000386:	f000 f825 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800038a:	f7ff ff7d 	bl	8000288 <main>
  bx  lr    
 800038e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800039c:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a4:	20000024 	.word	0x20000024

080003a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_IncTick+0x20>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_IncTick+0x24>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4413      	add	r3, r2
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_IncTick+0x24>)
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000020 	.word	0x20000020

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
